// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id      String  @id @default(cuid())
  title   String
  content String?
  owner   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  tasks   Task[]
}

model Task {
  id     String  @id @default(cuid())
  owner  User?   @relation(fields: [userId], references: [id])
  list   List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  userId String?
  listId String

  quest     Quest  @relation(fields: [questName], references: [value], onDelete: Cascade)
  questName String
}

model Quest {
  value             String              @id @unique @default(cuid())
  category          String
  optionalTitle     String?
  description       String
  repeatable        String
  location          String
  questGiver        String
  uespLink          String
  reward            String
  Task              Task[]
  QuestsOnCharacter QuestsOnCharacter[]
  owner             User?               @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail         String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  lists         List[]
  accounts      Account[]
  sessions      Session[]
  Task          Task[]
  checkedTasks  String      @default("")
  Character     Character[]
  Quest         Quest[]

  @@map(name: "users")
}

model Character {
  value  String  @id @default(cuid())
  name   String
  owner  User?   @relation(fields: [userId], references: [id])
  userId String?

  QuestsOnCharacter QuestsOnCharacter[]
}

model QuestsOnCharacter {
  character   Character @relation(fields: [characterId], references: [value], onDelete: Cascade)
  quest       Quest     @relation(fields: [questName], references: [value], onDelete: Cascade)
  characterId String
  questName   String

  @@id([questName, characterId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YourModel {
  id    Int    @id @default(autoincrement())
  // Other fields in your model
  
  // Number field with default value 0
  yourNumberField Int @default(0)
}
